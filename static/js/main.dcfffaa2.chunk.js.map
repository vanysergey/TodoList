{"version":3,"sources":["TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TodoList","props","useState","error","setError","title","setTitle","onClickAddTasks","trimmedTitle","trim","addTask","changeFilter","filter","tasksForRender","tasks","t","isDone","getTasksForRender","tasksListItems","length","map","tasksClasses","key","id","type","checked","onChange","e","changeTaskStatus","currentTarget","className","onClick","removeTask","allBtnClass","activeBtnClass","completedBtnClass","inputClasses","value","onKeyPress","App","v1","setTasks","setFilter","newTask","taskID","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.dcfffaa2.chunk.js","sourcesContent":["import React, {useState, ChangeEvent, KeyboardEvent} from 'react';\r\nimport {FillterValueType} from './App';\r\nimport './App.css'\r\n\r\ntype TodoListPropsTitle = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    addTask: (title: string) => void\r\n    removeTask: (taskID: string) => void\r\n    changeFilter: (filter: FillterValueType) => void\r\n    filter: FillterValueType\r\n    changeTaskStatus: (taskID: string, isDone: boolean) => void\r\n\r\n}\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\ntype onChangeInputType = {\r\n    e: void\r\n}\r\nexport const TodoList: React.FC<TodoListPropsTitle> = (props: TodoListPropsTitle) => {\r\n    const [error, setError] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>('')\r\n    const onClickAddTasks = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (!!trimmedTitle) {\r\n            props.addTask(trimmedTitle)\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setTitle('')\r\n    }\r\n    const onChangeInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        if (error) setError(false) // error && setError(false)\r\n    }\r\n    const onKeyPressInput = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') onClickAddTasks()\r\n    }\r\n    const changeFilter = (filter: FillterValueType) => {\r\n        return (\r\n            () => props.changeFilter(filter)\r\n        )\r\n    }\r\n\r\n\r\n    const getTasksForRender = (tasks: Array<TaskType>, filter: FillterValueType) => {\r\n        let tasksForRender;\r\n        switch (filter) {\r\n            case 'Completed':\r\n                tasksForRender = tasks.filter(t => t.isDone === true)\r\n                break\r\n            case 'Active':\r\n                tasksForRender = tasks.filter(t => t.isDone === false)\r\n                break\r\n            default:\r\n                tasksForRender = tasks\r\n        }\r\n        return tasksForRender\r\n    }\r\n    const tasksForRender: Array<TaskType> = getTasksForRender(props.tasks, props.filter)\r\n\r\n    const tasksListItems = tasksForRender.length ? tasksForRender.map(t => { //t=> {id:1, title: \"HTML\", isDone: true} ?\r\n            const onChangeStatusCheckbox = (e: ChangeEvent<HTMLInputElement>) => props.changeTaskStatus(t.id, e.currentTarget.checked)\r\n            const tasksClasses = (t.isDone ? 'is-done' : '')\r\n            return (\r\n                <li key={t.id}>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        checked={t.isDone}\r\n                        onChange={onChangeStatusCheckbox}/>\r\n                    <span className={tasksClasses}>{t.title}</span>\r\n                    <button className={'buttonDel'} onClick={() => props.removeTask(t.id)}>del</button>\r\n                </li>\r\n            )\r\n        })\r\n        : <span>No tasks with this filter</span>\r\n\r\n    const allBtnClass = props.filter === 'All' ? 'active-filter' : ''\r\n    const activeBtnClass = props.filter === 'Active' ? 'active-filter' : ''\r\n    const completedBtnClass = props.filter === 'Completed' ? 'active-filter' : ''\r\n    const inputClasses = error ? 'error' : ''\r\n\r\n    return (\r\n        <div className={'todoList'}>\r\n            <h3>{props.title}</h3>\r\n            <div>\r\n                <input\r\n                    value={title}\r\n                    onChange={onChangeInput} // (e) => setTitle(e.currentTarget.value)}\r\n                    onKeyPress={onKeyPressInput} // (e) => {if (e.key === 'Enter') onClickAddTasks()}}\r\n                    className={inputClasses}\r\n                />\r\n                <button onClick={onClickAddTasks}>+</button>\r\n                {error && <div className={'error-message'}>Tittle is required</div>}\r\n            </div>\r\n            <ul>\r\n                {tasksListItems}\r\n            </ul>\r\n            <div>\r\n                <button\r\n                    className={allBtnClass}\r\n                    // className={props.filter === \"All\" ? \"active-filter\" : \"\"}\r\n                    onClick={changeFilter('All')}>All\r\n                </button>\r\n                {/*() => props.changeFilter('All')}>All</button>*/}\r\n                <button\r\n                    className={activeBtnClass}\r\n                    onClick={changeFilter('Active')}>Active\r\n                </button>\r\n                {/*{() => props.changeFilter('Active')}>Active</button>*/}\r\n                <button\r\n                    className={completedBtnClass}\r\n                    onClick={changeFilter('Completed')}>Completed\r\n                </button>\r\n                {/*{() => props.changeFilter('Completed')}>Completed</button>*/}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, TodoList} from './TodoList';\r\nimport {v1} from 'uuid';\r\n\r\n// GUI\r\n//CLI - command line interface\r\n// C - create\r\n// R - read\r\n// U - update\r\n// D - delete\r\nexport type FillterValueType = 'All' | 'Active' | 'Completed'\r\n\r\nfunction App() {\r\n\r\n    const todoListTitle: string = 'what to learn'\r\n\r\n    const [tasks, setTasks] = useState([ //state, setState\r\n        {id: v1(), title: 'HTML&CSS', isDone: true},\r\n        {id: v1(), title: 'JS', isDone: true},\r\n        {id: v1(), title: 'React', isDone: false},\r\n    ])\r\n\r\n    const addTask = (title: string) => {\r\n        const newTask: TaskType = {\r\n            id: v1(), title, isDone: false\r\n        }\r\n        setTasks([newTask, ...tasks])\r\n    }\r\n    const changeTaskStatus = (taskID: string, isDone: boolean) => {\r\n        setTasks(tasks.map(t => t.id === taskID ? {...t, isDone: isDone} : t))\r\n\r\n    }\r\n\r\n    const [filter, setFilter] = useState<'All' | 'Active' | 'Completed'>('All')\r\n\r\n    const changeFilter = (filter: FillterValueType) => {\r\n        setFilter(filter)\r\n        console.log(filter)\r\n    }\r\n//UI^\r\n\r\n\r\n    const removeTask = (taskID: string) => { //2\r\n        setTasks(tasks.filter(t => t.id !== taskID)) // false\r\n        return undefined\r\n    }\r\n//BLL:\r\n    return (\r\n        <div className=\"App\">\r\n            <TodoList\r\n                title={todoListTitle}\r\n                filter={filter}\r\n                tasks={tasks}\r\n                addTask={addTask}\r\n                removeTask={removeTask}\r\n                changeFilter={changeFilter}\r\n                changeTaskStatus={changeTaskStatus}\r\n\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}